#!/usr/bin/env bash
# dcover checks the coverage impact of merging the current Go monorepo branch
# into main.
#
# Uses colordiff: https://formulae.brew.sh/formula/colordiff
#
# Example:
#   git checkout featurebranch
#   dcover

set -euo pipefail

tmp_dir=$(mktemp -d)

# Get feature (current) branch name.
head=$(git rev-parse --abbrev-ref HEAD)
# Get main branch name.
main=$(mainbranch)

if [ "$head" = "$main" ]; then
  blog error "mainbranch returns $main; run dcover on a feature branch."
  exit
fi

function profile() {
  # Get coverage stats; do some jq filth to format package name and coverage percentage.
  go test -count=1 -cover -json ./... \
    | jq -r 'select(.Action == "output") | select(.Output | startswith("coverage")) | "\(.Package)\t\(.Output | gsub("\n"; ""))\t\(.Package)"' \
    | sort \
    | cut -f2-
}

# Profile main branch in a git worktree: 
mergeBase=$(git merge-base "origin/$main" HEAD | cut -c -8)
git worktree add merge-base "$mergeBase" > /dev/null 2>&1
blog info "Profiling $main..."
cd merge-base
mainCover=$(profile)
cd ..
git worktree remove merge-base

# Profile feature branch.
blog info "Profiling $head..."
branchCover=$(profile)

# An improved version would iterate over the tabular data and output comparisons
# package-by-package.
blog info "Coverage impact of $head:"
colordiff --ignore-space-change <(echo "$mainCover") <(echo "$branchCover")

rm -rf "$tmp_dir"
